{"version":3,"sources":["webparts/crudSheet/components/ContactsService.ts"],"names":[],"mappings":";AAAA,8CAA8F;AAE9F,qCAAoC;AAUpC;IAII;QAEI,IAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,EAAE,CAAC;QAC5B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,iBAAO,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,cAAc,EAAE,oBAAoB,CAAC,CAAC,CAAC;QACzF,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,iBAAO,CAAC,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,cAAc,EAAE,uBAAuB,CAAC,CAAC,CAAC;QACjG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,iBAAO,CAAC,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,cAAc,EAAE,oBAAoB,CAAC,CAAC,CAAC;QAE1F,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjD,CAAC;IAEM,yCAAW,GAAlB;QAAA,iBAIC;QAHG,MAAM,CAAC,IAAI,OAAO,CAAY,UAAA,OAAO;YACjC,OAAO,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,yCAAW,GAAlB,UAAmB,OAAO;QAA1B,iBAYC;QAXG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,CAAC;YACnB,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;gBACtB,CAAC,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;gBAC9B,CAAC,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;gBAChC,CAAC,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;gBACxB,CAAC,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;YAC5B,CAAC;QACL,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,OAAO,CAAY,UAAA,OAAO;YACjC,OAAO,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,2CAAa,GAApB,UAAqB,OAAO;QAA5B,iBAOC;QANG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,CAAC;YAClC,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,OAAO,CAAC,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,OAAO,CAAY,UAAA,OAAO;YACjC,OAAO,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,wCAAU,GAAjB;QAAA,iBAKC;QAJG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,iBAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAC,WAAW,EAAC,YAAY,EAAC,OAAO,EAAC,OAAO,CAAC,CAAC,CAAC;QACnG,MAAM,CAAC,IAAI,OAAO,CAAY,UAAA,OAAO;YACjC,OAAO,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;IACP,CAAC;IACL,0BAAC;AAAD,CApDA,AAoDC,IAAA;AApDY,kDAAmB;AAsDhC;IAMI,yBAAmB,cAA+B;QAC9C,IAAI,CAAC,UAAU,GAAG,cAAc,CAAC,YAAY,CAAC;QAC9C,IAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,EAAE,CAAC;QAC5B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC;QAEjE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAEjD,CAAC;IAEM,qCAAW,GAAlB;QAAA,iBAcC;QAZG,IAAI,GAAG,GAAG,IAAI,CAAC,cAAc,GAAG,qFAAqF,CAAC;QACtH,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QAEnB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,sBAAY,CAAC,cAAc,CAAC,EAAE,CAAC;aAC9D,IAAI,CAAC,UAAC,QAA8B;YACjC,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,UAAC,IAAI;gBAC7B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,CAAC;oBAChB,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,iBAAO,CAAC,CAAC,CAAC,EAAE,EAAC,CAAC,CAAC,KAAK,EAAC,CAAC,CAAC,SAAS,EAAC,CAAC,CAAC,SAAS,EAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBAClF,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,KAAI,CAAC,QAAQ,CAAC;YACzB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,qCAAW,GAAlB,UAAmB,OAAe;QAAlC,iBAqBC;QAnBG,IAAI,GAAG,GAAG,IAAI,CAAC,cAAc,GAAG,wDAAwD,GAAG,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC;QAE7G,IAAM,iBAAiB,GAAyB;YAC5C,IAAI,EAAC,IAAI,CAAC,SAAS,CAAC;gBAChB,KAAK,EAAE,OAAO,CAAC,QAAQ;gBACvB,SAAS,EAAE,OAAO,CAAC,SAAS;gBAC5B,SAAS,EAAE,OAAO,CAAC,KAAK;gBACxB,KAAK,EAAE,OAAO,CAAC,KAAK;aACvB,CAAC;SACL,CAAC;QACF,iBAAiB,CAAC,OAAO,GAAG;YACvB,UAAU,EAAE,GAAG;YACf,eAAe,EAAE,OAAO;SAC5B,CAAC;QAEF,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,sBAAY,CAAC,cAAc,CAAC,EAAE,EAAE,iBAAiB,CAAC;aAClF,IAAI,CAAC,UAAC,QAA8B;YACjC,MAAM,CAAC,KAAI,CAAC,WAAW,EAAE,CAAC;QAC9B,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,uCAAa,GAApB,UAAqB,OAAO;QAA5B,iBAYC;QAVG,IAAI,GAAG,GAAG,IAAI,CAAC,cAAc,GAAG,wDAAwD,GAAG,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC;QAE7G,IAAM,iBAAiB,GAAyB,EAAG,CAAC;QACpD,iBAAiB,CAAC,OAAO,GAAG,EAAC,UAAU,EAAE,GAAG,EAAC,CAAC;QAC9C,iBAAiB,CAAC,MAAM,GAAG,QAAQ,CAAC;QAEpC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE,sBAAY,CAAC,cAAc,CAAC,EAAE,EAAE,iBAAiB,CAAC;aACnF,IAAI,CAAC,UAAC,QAA8B;YACjC,MAAM,CAAC,KAAI,CAAC,WAAW,EAAE,CAAC;QAC9B,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,oCAAU,GAAjB;QAAA,iBAiBC;QAfG,IAAI,GAAG,GAAG,IAAI,CAAC,cAAc,GAAG,0CAA0C,CAAC;QAE3E,IAAM,iBAAiB,GAAyB;YAC5C,IAAI,EAAC,IAAI,CAAC,SAAS,CAAC;gBAChB,KAAK,EAAE,WAAW;gBAClB,SAAS,EAAE,YAAY;gBACvB,SAAS,EAAE,cAAc;gBACzB,KAAK,EAAE,QAAQ;aAClB,CAAC;SACL,CAAC;QAEF,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,sBAAY,CAAC,cAAc,CAAC,EAAE,EAAE,iBAAiB,CAAC;aACnF,IAAI,CAAC,UAAC,QAA8B;YAChC,MAAM,CAAC,KAAI,CAAC,WAAW,EAAE,CAAC;QAC9B,CAAC,CAAC,CAAC;IACP,CAAC;IACL,sBAAC;AAAD,CAzFA,AAyFC,IAAA;AAzFY,0CAAe","file":"webparts/crudSheet/components/ContactsService.js","sourcesContent":["import { SPHttpClient, SPHttpClientResponse, ISPHttpClientOptions } from '@microsoft/sp-http';\r\nimport { IWebPartContext } from '@microsoft/sp-webpart-base';\r\nimport { Contact } from './Contact';\r\n\r\n\r\nexport interface IContactsService{\r\n    getContacts():Promise<Contact[]>;\r\n    saveContact(contact:Contact):Promise<Contact[]>;\r\n    deleteContact(contact): Promise<Contact[]>;\r\n    addContact():Promise<Contact[]>;\r\n}\r\n\r\nexport class MockContactsService implements IContactsService{\r\n\r\n    private contacts:Contact[];\r\n\r\n    constructor(){\r\n\r\n        this.contacts = new Array();\r\n        this.contacts.push(new Contact(1, \"Cox\", \"Brian\", \"555-555-5555\", \"brianc@wingtip.com\"));\r\n        this.contacts.push(new Contact(2, \"Doyle\", \"Patricia\", \"555-555-5555\", \"patriciad@wingtip.com\"));\r\n        this.contacts.push(new Contact(3, \"Yali\", \"David\", \"555-555-5555\", \"davidy@wingtip.com\"));\r\n\r\n        this.getContacts = this.getContacts.bind(this);\r\n        this.saveContact = this.saveContact.bind(this);\r\n        this.deleteContact = this.deleteContact.bind(this);\r\n        this.addContact = this.addContact.bind(this);\r\n    }\r\n\r\n    public getContacts(): Promise<Contact[]>{\r\n        return new Promise<Contact[]>(resolve => {\r\n            resolve(this.contacts);\r\n        });\r\n    }\r\n\r\n    public saveContact(contact): Promise<Contact[]> {\r\n        this.contacts.forEach(c => {\r\n            if (c.id === contact.id) {\r\n                c.lastName = contact.lastName;\r\n                c.firstName = contact.firstName;\r\n                c.phone = contact.phone;\r\n                c.email = contact.email;\r\n            }\r\n        });\r\n        return new Promise<Contact[]>(resolve => {\r\n            resolve(this.contacts);\r\n        });\r\n    }\r\n\r\n    public deleteContact(contact): Promise<Contact[]> {\r\n        this.contacts = this.contacts.filter(c => {\r\n            return c.id !== contact.id;\r\n        });\r\n        return new Promise<Contact[]>(resolve => {\r\n            resolve(this.contacts);\r\n        });\r\n    }\r\n\r\n    public addContact(): Promise<Contact[]> {\r\n        this.contacts.push(new Contact(this.contacts.length + 1,\"Last Name\",\"First Name\",\"Phone\",\"Email\"));\r\n        return new Promise<Contact[]>(resolve => {\r\n            resolve(this.contacts);\r\n        });\r\n    }\r\n}\r\n\r\nexport class ContactsService implements IContactsService {\r\n    \r\n    private httpClient: SPHttpClient;\r\n    private contacts: Contact[];\r\n    private webAbsoluteUrl: string;\r\n\r\n    public constructor(webPartContext: IWebPartContext){\r\n        this.httpClient = webPartContext.spHttpClient;\r\n        this.contacts = new Array();\r\n        this.webAbsoluteUrl = webPartContext.pageContext.web.absoluteUrl;\r\n\r\n        this.getContacts = this.getContacts.bind(this);\r\n        this.saveContact = this.saveContact.bind(this);\r\n        this.deleteContact = this.deleteContact.bind(this);\r\n        this.addContact = this.addContact.bind(this);\r\n\r\n    }\r\n\r\n    public getContacts(): Promise<Contact[]>{\r\n\r\n        let url = this.webAbsoluteUrl + \"/_api/Lists/getByTitle('Contacts')/items?$select=Id,Title,FirstName,WorkPhone,Email\";\r\n        this.contacts = [];\r\n\r\n        return this.httpClient.get(url, SPHttpClient.configurations.v1)\r\n        .then((response: SPHttpClientResponse) => {\r\n            return response.json().then((data) => {\r\n                data.value.forEach(c => {\r\n                    this.contacts.push(new Contact(c.Id,c.Title,c.FirstName,c.WorkPhone,c.Email));\r\n                });\r\n                return this.contacts;\r\n            });\r\n        });\r\n    }\r\n\r\n    public saveContact(contact:Contact): Promise<Contact[]>{\r\n\r\n        let url = this.webAbsoluteUrl + \"/_api/Lists/getByTitle('Contacts')/getItemByStringId('\" + contact.id + \"')\";\r\n\r\n        const httpClientOptions: ISPHttpClientOptions = {\r\n            body:JSON.stringify({\r\n                Title: contact.lastName,\r\n                FirstName: contact.firstName,\r\n                WorkPhone: contact.phone,\r\n                Email: contact.email\r\n            })\r\n        };\r\n        httpClientOptions.headers = { \r\n             'IF-MATCH': '*',\r\n             'X-Http-Method': 'PATCH' \r\n        };\r\n        \r\n        return this.httpClient.post(url, SPHttpClient.configurations.v1, httpClientOptions)\r\n        .then((response: SPHttpClientResponse) => {\r\n            return this.getContacts();\r\n        });\r\n    }\r\n\r\n    public deleteContact(contact): Promise<Contact[]> {\r\n\r\n        let url = this.webAbsoluteUrl + \"/_api/Lists/getByTitle('Contacts')/getItemByStringId('\" + contact.id + \"')\";\r\n\r\n        const httpClientOptions: ISPHttpClientOptions = { };\r\n        httpClientOptions.headers = {'IF-MATCH': '*'};\r\n        httpClientOptions.method = \"DELETE\";\r\n        \r\n        return this.httpClient.fetch(url, SPHttpClient.configurations.v1, httpClientOptions)\r\n        .then((response: SPHttpClientResponse) => {\r\n            return this.getContacts();\r\n        });\r\n    }\r\n\r\n    public addContact(): Promise<Contact[]> {\r\n\r\n        let url = this.webAbsoluteUrl + \"/_api/Lists/getByTitle('Contacts')/items\";\r\n        \r\n        const httpClientOptions: ISPHttpClientOptions = {\r\n            body:JSON.stringify({\r\n                Title: \"Last Name\",\r\n                FirstName: \"First Name\",\r\n                WorkPhone: \"Phone Number\",\r\n                Email: \"E-mail\"\r\n            })\r\n        };\r\n        \r\n        return this.httpClient.post(url, SPHttpClient.configurations.v1, httpClientOptions)\r\n       .then((response: SPHttpClientResponse) => {\r\n            return this.getContacts();\r\n        });\r\n    }\r\n}"],"sourceRoot":"..\\..\\..\\..\\src"}